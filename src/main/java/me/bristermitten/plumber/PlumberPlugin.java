/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.bristermitten.plumber;

import co.aikar.commands.annotation.CommandAlias;
import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Singleton;
import me.bristermitten.plumber.aspect.AspectReflectionManager;
import me.bristermitten.plumber.aspect.modules.InitialModule;
import me.bristermitten.plumber.command.CommandAspect;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.plugin.java.JavaPluginLoader;
import org.reflections.Configuration;
import org.reflections.Reflections;
import org.reflections.scanners.FieldAnnotationsScanner;
import org.reflections.scanners.MethodAnnotationsScanner;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.scanners.TypeAnnotationsScanner;
import org.reflections.util.ConfigurationBuilder;

import java.io.File;

/**
 * Main class of Plumber. A Plugin that uses Plumber should extend this instead of
 * {@link JavaPlugin}, as it is responsible for the loading of the framework,
 * and may handle more in the future.
 * <p>
 * This class will be a Singleton throughout the framework, and at the moment doesn't do much
 * else than the initial setup.
 * On that note, in any Plumber plugin, {@link PlumberPlugin#loadPlumber()}
 * should be called in your {@link JavaPlugin#onEnable()}
 */
@Singleton
public class PlumberPlugin extends JavaPlugin {

    @Inject
    private Injector injector;

    public PlumberPlugin() {
    }

    public PlumberPlugin(JavaPluginLoader loader, PluginDescriptionFile description, File dataFolder, File file) {
        super(loader, description, dataFolder, file);
    }

    @Override
    public void onEnable() {
        loadPlumber();
    }

    /**
     * Load the framework.
     * This entails scanning classes in the classpath, creating instances and injectors
     * through Guice, and loading all necessary aspects.
     * This should be called immediately in {@link JavaPlugin#onEnable()}
     */
    protected void loadPlumber() {
        String ourPackage = getClass().getPackage().getName();
        String[] packages = {ourPackage, PlumberPlugin.class.getPackage().getName()};
        Configuration config = new ConfigurationBuilder()
                .addClassLoader(getClassLoader())
                .filterInputsBy(p -> p != null && !p.contains("META-INF") && !p.contains("org.bukkit"))
                .setExpandSuperTypes(false)
                .forPackages(packages)
                .setScanners(new MethodAnnotationsScanner(), new FieldAnnotationsScanner(),
                        new TypeAnnotationsScanner(), new SubTypesScanner());

        Reflections reflections = new Reflections(config);

        InitialModule initial = new InitialModule(this, reflections);
        Injector initialInjector = Guice.createInjector(initial);
        AspectReflectionManager manager = initialInjector.getInstance(AspectReflectionManager.class);
        manager.loadBaseBindings();
        manager.addThirdPartyBinding(CommandAlias.class, CommandAspect.class);
        manager.loadAll(this);
    }

    protected <T> T getInstance(Class<T> clazz) {
        return injector.getInstance(clazz);
    }
}
