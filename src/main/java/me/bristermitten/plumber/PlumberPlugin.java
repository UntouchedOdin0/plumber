/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.bristermitten.plumber;

import co.aikar.commands.annotation.CommandAlias;
import com.google.inject.Guice;
import com.google.inject.Singleton;
import me.bristermitten.plumber.command.CommandAspect;
import me.bristermitten.plumber.newaspect.AspectReflectionManager;
import me.bristermitten.plumber.newaspect.modules.InitialModule;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.plugin.java.JavaPluginLoader;
import org.reflections.Configuration;
import org.reflections.Reflections;
import org.reflections.util.ConfigurationBuilder;

import java.io.File;

/**
 * Main class of the project
 * Plumber equivalent of SpringApplication
 */
@Singleton
public class PlumberPlugin extends JavaPlugin {

    private static PlumberPlugin plumberPlugin;

    public PlumberPlugin() {
    }

    public PlumberPlugin(JavaPluginLoader loader, PluginDescriptionFile description, File dataFolder, File file) {
        super(loader, description, dataFolder, file);
    }

    /**
     * Use discouraged
     * Return the active plugin instance
     * Only to be used if Dependency injection is not convenient
     *
     * @return
     */
    public static PlumberPlugin activePlugin() {
        return plumberPlugin;
    }

    protected void loadPlumber() {

        String ourPackage = getClass().getPackage().getName();
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
        configurationBuilder.setClassLoaders(new ClassLoader[]{getClassLoader()});
        configurationBuilder.filterInputsBy(p -> p != null && !p.contains("META-INF") && !p.contains("org.bukkit"));
        Configuration config = configurationBuilder.forPackages(ourPackage);

        Reflections reflections = new Reflections(config);

        InitialModule initial = new InitialModule(this, reflections);
        AspectReflectionManager manager = Guice.createInjector(initial).getInstance(AspectReflectionManager.class);
        manager.loadBaseBindings();
        manager.addThirdPartyBinding(CommandAlias.class, CommandAspect.class);
        manager.loadAll();

        plumberPlugin = this;
    }

}
